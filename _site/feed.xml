<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Pancratius Blog</title>
    <description>Every failure is leading towards success.</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Tue, 17 Jul 2018 16:50:47 +0800</pubDate>
    <lastBuildDate>Tue, 17 Jul 2018 16:50:47 +0800</lastBuildDate>
    <generator>Jekyll v3.8.3</generator>
    
      <item>
        <title>git本地拉取、提交代码免输入用户名和密码</title>
        <description>&lt;p&gt;解决 git pull 或者 git push 每次都要输入用户名和密码问题&lt;/p&gt;

&lt;p&gt;方式一、命令行
git config –global credential.helper store&lt;/p&gt;

&lt;p&gt;方式二、修改配置文件.config
在文件最后加上系列内容即可&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[credential]
	helper = store
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;然后 &lt;em&gt;git pull /git push&lt;/em&gt; 输入一次用户名和密码即可，这个信息会被记录下来。 这一步会在用户目录下生成文件.git-credential记录用户名密码的信息。&lt;/p&gt;
</description>
        <pubDate>Wed, 11 Jul 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2018/07/11/git%E6%9C%AC%E5%9C%B0%E6%8B%89%E5%8F%96-%E6%8F%90%E4%BA%A4%E4%BB%A3%E7%A0%81%E5%85%8D%E8%BE%93%E5%85%A5%E7%94%A8%E6%88%B7%E5%90%8D%E5%92%8C%E5%AF%86%E7%A0%81/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/07/11/git%E6%9C%AC%E5%9C%B0%E6%8B%89%E5%8F%96-%E6%8F%90%E4%BA%A4%E4%BB%A3%E7%A0%81%E5%85%8D%E8%BE%93%E5%85%A5%E7%94%A8%E6%88%B7%E5%90%8D%E5%92%8C%E5%AF%86%E7%A0%81/</guid>
        
        <category>git</category>
        
        <category>credential</category>
        
        <category>用户名、密码</category>
        
        
      </item>
    
      <item>
        <title>SpringMVC中相关注解介绍</title>
        <description>&lt;p&gt;&lt;strong&gt;@RequestMapping&lt;/strong&gt;
@RequestMapping是一个用来处理请求地址映射的注解，可用于类或方法上。用于类上，表示类中的所有响应请求的方法都是以该地址作为父路径。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;@GetMapping&lt;/strong&gt;
@GetMapping是一个组合注解，是@RequestMapping(method = RequestMethod.GET)的缩写。该注解将HTTP Get 映射到 特定的处理方法上。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;@PreAuthorize/@PostAuthorize&lt;/strong&gt;
@PreAuthorize/@PostAuthorize 注解更适合方法级的安全,也支持Spring 表达式语言，提供了基于表达式的访问控制。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;@Controller&lt;/strong&gt;
@Controller 用来响应页面，@Controller必须配合模版来使用。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;@RestController&lt;/strong&gt;
@RestController是@ResponseBody和@Controller的组合注解。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;@Entity&lt;/strong&gt;
@Entity注释指名这是一个实体Bean。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;@Table&lt;/strong&gt;
@Table注释指定了Entity所要映射带数据库表,如果缺省@Table注释，系统默认采用类名作为映射表的表名。实体Bean的每个实例代表数据表中的一行数据，行中的一列对应实例中的一个属性。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;@Column&lt;/strong&gt;
@Column注释定义了将成员属性映射到关系表中的哪一列和该列的结构信息，属性如下：&lt;/p&gt;

&lt;p&gt;1）name：映射的列名。如：映射tbl_user表的name列，可以在name属性的上面或getName方法上面加入；&lt;/p&gt;

&lt;p&gt;2）unique：是否唯一；&lt;/p&gt;

&lt;p&gt;3）nullable：是否允许为空；&lt;/p&gt;

&lt;p&gt;4）length：对于字符型列，length属性指定列的最大字符长度；&lt;/p&gt;

&lt;p&gt;5）insertable：是否允许插入；&lt;/p&gt;

&lt;p&gt;6）updatetable：是否允许更新；&lt;/p&gt;

&lt;p&gt;7）columnDefinition：定义建表时创建此列的DDL；&lt;/p&gt;

&lt;p&gt;8）secondaryTable：从表名。如果此列不建在主表上（默认是主表），该属性定义该列所在从表的名字。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;@Id&lt;/strong&gt;
@Id注释指定表的主键&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;@GeneratedValue&lt;/strong&gt;
@GeneratedValue注释定义了标识字段生成方式。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;@Temporal&lt;/strong&gt;
@Temporal注释用来指定java.util.Date或java.util.Calender属性与数据库类型date、time或timestamp中的那一种类型进行映射。
@Temporal(value=TemporalType.TIME)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;@Transient&lt;/strong&gt;
如果不想让一些成员属性映射成数据库字段，可以使用@Transient注释进行标注。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;@OneToOne&lt;/strong&gt;
一对一关系，需要在关系维护端的@OneToOne注释中定义mappedBy属性。在关系被维护端建立外键列指向关系维护的主键列。
@OneToOne注释指明User与Card为一对一关系，@OneToOne注释有5个属性：targetEntity、cascade、fetch、optional和mappedBy。&lt;/p&gt;

&lt;p&gt;1）targetEntity：Class类型的属性&lt;/p&gt;

&lt;p&gt;2）mappedBy：String类型的属性。定义类之间的双向关联。如果类之间是单向关系，不需要提供定义，如果类和类之间形成双向关系。就需要使用这个属性进行定义，否则可能引起数据一致性的问题。&lt;/p&gt;

&lt;p&gt;3）cascade：CascadeType类型。该属性定义类和类之间的级联关系。定义级联关系将被容器视为当前类对象及其关联类对象采取相同的操作，而且这种关系是递归的。cascade的值只能从CascadeType.PERSIST(级联新建)、CascadeType.REMOVE(级联删除)、CascadeType.REFRESH(级联刷新)、Cascade.MERGE(级联更新)中选择一个或多个。还有一个选择是使用CascadeType.ALL，表示选择全部四项。&lt;/p&gt;

&lt;p&gt;4）fetch：FetchType类型的属性。可选择项包括：FetchType.EAGER和FetchType.LAZY。前者表示关系类在主体类加载的时候同时加载，后者表示关系类在被访问时才加载。默认值是FetchType.LAZY。&lt;/p&gt;

&lt;p&gt;5）optional：表示被维护对象是否需要存在。如果为真，说明card属性可以null，也就是允许没有身份证，未成年人就是没有身份证。&lt;/p&gt;

&lt;p&gt;@OneToOne注释指明Card与User为一对一关系，Card是关系被维护端，optional=false设置user属性值不能为空，也就是身份证必须有对应的主人。@JoinColumn(name=”user_id” referencedColumnName=”id” unique=”true”)指明tbl_card表的user_id列作为外键与tbl_user表的person_id列进行关联，unique=true指明user_id列的值不可重复。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;@OneToMany&lt;/strong&gt;
&lt;strong&gt;@ManyToOne&lt;/strong&gt;
&lt;strong&gt;@ManyToMany&lt;/strong&gt;
an*
*&lt;/p&gt;
</description>
        <pubDate>Tue, 26 Jun 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2018/06/26/SpringMVC%E4%B8%AD%E7%9B%B8%E5%85%B3%E6%B3%A8%E8%A7%A3%E4%BB%8B%E7%BB%8D/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/06/26/SpringMVC%E4%B8%AD%E7%9B%B8%E5%85%B3%E6%B3%A8%E8%A7%A3%E4%BB%8B%E7%BB%8D/</guid>
        
        <category>cocoapods</category>
        
        <category>更新</category>
        
        
      </item>
    
      <item>
        <title>cocoapods版本更新</title>
        <description>&lt;p&gt;1.先切换gem源&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gem sources --remove https://rubygems.org/
gem source -a https://gems.ruby-china.org
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;2.查看是否切换成功&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gem source -l
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;3.查看是否成功&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;*** CURRENT SOURCES ***
https://gems.ruby-china.org
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;4.切换成功后，接下来就可以开始升级了cocoapods了&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo gem install cocoapods
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;5.查看是否升级成功&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pod --version
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;6.升级成功后的版本号&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1.5.3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;7.设置pod仓库&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pod setup
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;8.setup成功&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Setup completed
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Tue, 26 Jun 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2018/06/26/cocoapods%E7%89%88%E6%9C%AC%E6%9B%B4%E6%96%B0/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/06/26/cocoapods%E7%89%88%E6%9C%AC%E6%9B%B4%E6%96%B0/</guid>
        
        <category>cocoapods</category>
        
        <category>更新</category>
        
        
      </item>
    
      <item>
        <title>如何使用多个GitHub账户</title>
        <description>&lt;p&gt;参考文件（带视频指导）：&lt;a href=&quot;https://code.tutsplus.com/tutorials/quick-tip-how-to-work-with-github-and-multiple-accounts--net-22574&quot;&gt;How to Work with GitHub and Multiple Accounts&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;第1步-创建一个新的ssh密钥&quot;&gt;第1步 创建一个新的SSH密钥&lt;/h4&gt;

&lt;p&gt;首先为第二个GitHub账号生成唯一的SSH密钥。假如该GitHub账号名称是&lt;code class=&quot;highlighter-rouge&quot;&gt;Pancratius&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ssh-keygen -t rsa -C &quot;your-email-address&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;需要注意的是：不要覆盖之前账户的密钥。回车以后，当出现文件路径时，输入一个新的文件名称 &lt;code class=&quot;highlighter-rouge&quot;&gt;~/.ssh/id_rsa_xxx&lt;/code&gt;，然后直接连续回车，就可以了，这个时候会看到&lt;em&gt;~/.ssh&lt;/em&gt;路径下回出现&lt;code class=&quot;highlighter-rouge&quot;&gt;id_rsa_xxx和id_rsa_xxx.pub&lt;/code&gt;两个文件，这两个文件对应的就是我们第二个账号生成的私钥和公钥了。&lt;/p&gt;

&lt;h4 id=&quot;第2步-添加新的密钥&quot;&gt;第2步 添加新的密钥&lt;/h4&gt;

&lt;p&gt;将新生成的公钥填加到GitHub账户的SSH下。&lt;/p&gt;

&lt;p&gt;将新的密钥名称添加到ssh中心，在终端中输入：&lt;code class=&quot;highlighter-rouge&quot;&gt;ssh-add ~/.ssh/id_rsa_xxx&lt;/code&gt;，如果成功，会看到“身份已添加”的回复信息。&lt;/p&gt;

&lt;h4 id=&quot;第3步-创建一个配置文件&quot;&gt;第3步 创建一个配置文件&lt;/h4&gt;

&lt;p&gt;在&lt;code class=&quot;highlighter-rouge&quot;&gt;~/.ssh&lt;/code&gt;路径下创建一个config文件，该文件的目的是兼容多个GitHub账号，以此区分推送项目时推到不同账号。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# default GitHub account
Host github.com
  HostName github.com
  User git
  IdentityFile ~/.ssh/id_rsa

# GitHub account xxx
Host github-xxx  #自定义一个域名，作为第二个账号的GitHub地址
  HostName github.com
  User git
  IdentityFile ~/.ssh/id_rsa_xxx
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;第4步-运行测试&quot;&gt;第4步 运行测试&lt;/h4&gt;

&lt;p&gt;将你要上传的项目下，&lt;code class=&quot;highlighter-rouge&quot;&gt;git init&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;git commit -m &quot;first commit&quot;&lt;/code&gt;添加Git管理文件和仓库&lt;/p&gt;

&lt;p&gt;在GitHub账户下新建一个repository，例如&lt;code class=&quot;highlighter-rouge&quot;&gt;test_new_github_account&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;在本地项目下，将本地项目添加到远程仓库中，&lt;code class=&quot;highlighter-rouge&quot;&gt;git remote add origin git@github-xxx:Pancratius/test_new_github_account.git&lt;/code&gt;，可以看到这里我们没有使用&lt;code class=&quot;highlighter-rouge&quot;&gt;git@github.com&lt;/code&gt;而是使用的&lt;code class=&quot;highlighter-rouge&quot;&gt;git@github-xxx&lt;/code&gt;我们再config文件中指定的Host，意思就是将本地代码添加到&lt;code class=&quot;highlighter-rouge&quot;&gt;github-xxx&lt;/code&gt;对应的账户下&lt;/p&gt;

&lt;p&gt;运行&lt;code class=&quot;highlighter-rouge&quot;&gt;git push origin master&lt;/code&gt;这个时候，等待完成，就可以看到项目已经存在你的GitHub账户下了。&lt;/p&gt;

</description>
        <pubDate>Fri, 22 Jun 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2018/06/22/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E5%A4%9A%E4%B8%AAGitHub%E8%B4%A6%E6%88%B7/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/06/22/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E5%A4%9A%E4%B8%AAGitHub%E8%B4%A6%E6%88%B7/</guid>
        
        <category>GitHub</category>
        
        
      </item>
    
  </channel>
</rss>
